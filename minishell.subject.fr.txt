Voici la traduction du sujet du projet Minishell en fran√ßais :

Minishell

Aussi beau qu‚Äôun shell

R√©sum√© :

Ce projet consiste √† cr√©er un shell simple.

Oui, votre propre petit bash.
Vous apprendrez beaucoup sur les processus et les descripteurs de fichiers.

Version : 7.1

Chapitre I - Introduction

L‚Äôexistence des shells est li√©e √† l‚Äôexistence m√™me de l‚Äôinformatique.

√Ä l‚Äô√©poque, tous les d√©veloppeurs √©taient d‚Äôaccord pour dire que communiquer avec un ordinateur en utilisant des interrupteurs 1/0 align√©s √©tait s√©rieusement aga√ßant.

Il √©tait donc logique d‚Äôavoir l‚Äôid√©e de cr√©er un logiciel permettant de communiquer avec un ordinateur √† l‚Äôaide de lignes de commande interactives dans un langage quelque peu proche du langage humain.

Gr√¢ce √† Minishell, vous pourrez voyager dans le temps et revenir aux probl√®mes que rencontraient les gens avant l‚Äôexistence de Windows.

Chapitre II - Instructions g√©n√©rales
	‚Ä¢	Votre projet doit √™tre √©crit en C.
	‚Ä¢	Il doit √™tre conforme √† la Norminette. Les fichiers/fonctions bonus sont √©galement soumis √† cette norme et toute erreur entra√Ænera une note de 0.
	‚Ä¢	Vos fonctions ne doivent pas provoquer de plantages inattendus (segmentation fault, bus error, double free, etc.), sauf en cas de comportement ind√©fini. Sinon, votre projet sera consid√©r√© comme non fonctionnel et not√© 0.
	‚Ä¢	Toute m√©moire allou√©e sur le tas (heap) doit √™tre correctement lib√©r√©e. Aucune fuite de m√©moire ne sera tol√©r√©e.
	‚Ä¢	Vous devez fournir un Makefile qui compile vos fichiers sources avec les options -Wall -Wextra -Werror, utilise cc et ne doit pas relinker.
	‚Ä¢	Votre Makefile doit contenir au minimum les r√®gles : $(NAME), all, clean, fclean et re.
	‚Ä¢	Pour les bonus, une r√®gle bonus doit √™tre ajout√©e au Makefile et les fichiers doivent √™tre dans des fichiers distincts _bonus.{c/h}.
	‚Ä¢	Si l‚Äôutilisation de votre libft est autoris√©e, elle doit √™tre copi√©e dans un dossier libft avec son propre Makefile, et votre Makefile doit la compiler avant votre projet.
	‚Ä¢	Il est recommand√© de cr√©er des programmes de test, bien que non requis pour la soumission. Ils seront utiles pour tester votre projet et celui de vos camarades lors des soutenances.
	‚Ä¢	Vous devez soumettre votre travail dans le d√©p√¥t Git assign√©. Seul le travail pr√©sent dans le d√©p√¥t sera √©valu√©.
Si votre projet est √©valu√© par Deepthought, l‚Äô√©valuation s‚Äôarr√™tera √† la premi√®re erreur.

Chapitre III - Partie obligatoire

Informations g√©n√©rales :
	‚Ä¢	Nom du programme : minishell
	‚Ä¢	Fichiers √† rendre : Makefile, *.h, *.c
	‚Ä¢	Makefile : Doit contenir les r√®gles NAME, all, clean, fclean, re
	‚Ä¢	Libft autoris√©e : Oui
	‚Ä¢	Description : √âcrire un shell

Fonctionnalit√©s attendues :

Votre shell doit :
	‚Ä¢	Afficher un prompt lorsqu‚Äôil attend une commande.
	‚Ä¢	G√©rer un historique des commandes.
	‚Ä¢	Rechercher et ex√©cuter les ex√©cutables appropri√©s (via $PATH ou en utilisant un chemin absolu/relatif).
	‚Ä¢	√âviter l‚Äôutilisation de variables globales, sauf pour indiquer un signal re√ßu.
	‚Ä¢	Ne pas interpr√©ter les guillemets non ferm√©s ou certains caract√®res sp√©ciaux non requis (ex. \, ;).
	‚Ä¢	G√©rer les quotes :
	‚Ä¢	' (simple quote) : emp√™che l‚Äôinterpr√©tation des m√©tacaract√®res.
	‚Ä¢	" (double quote) : emp√™che l‚Äôinterpr√©tation sauf pour $.

	‚Ä¢	Impl√©menter les redirections :
	‚Ä¢	< : redirige l‚Äôentr√©e.
	‚Ä¢	> : redirige la sortie.
	‚Ä¢	<< : lit l‚Äôentr√©e jusqu‚Äô√† un d√©limiteur.
	‚Ä¢	>> : redirige la sortie en mode append.

	‚Ä¢	Impl√©menter les pipes (|) : la sortie d‚Äôune commande devient l‚Äôentr√©e de la suivante.
	‚Ä¢	G√©rer les variables d‚Äôenvironnement ($VAR).
	‚Ä¢	G√©rer ?, qui doit contenir le code de sortie du dernier pipeline ex√©cut√©.
	‚Ä¢	G√©rer les signaux (ctrl-C, ctrl-D, ctrl-\) :
	‚Ä¢	ctrl-C : affiche un nouveau prompt sur une nouvelle ligne.
	‚Ä¢	ctrl-D : quitte le shell.
	‚Ä¢	ctrl-\ : ne fait rien en mode interactif.

	‚Ä¢	Impl√©menter les builtins suivants :
	‚Ä¢	echo avec option -n
	‚Ä¢	cd (avec un chemin relatif ou absolu)
	‚Ä¢	pwd (sans option)
	‚Ä¢	export (sans option)
	‚Ä¢	unset (sans option)
	‚Ä¢	env (sans option/argument)
	‚Ä¢	exit (sans option)

‚ö†Ô∏è Attention : La fonction readline() peut provoquer des fuites de m√©moire. Vous n‚Äôavez pas √† les corriger, mais votre propre code ne doit pas en avoir.

üí° Conseil : Si un comportement n‚Äôest pas clairement d√©fini, utilisez bash comme r√©f√©rence.

Chapitre IV - Partie Bonus

Si vous souhaitez aller plus loin, votre programme peut aussi :
	‚Ä¢	Impl√©menter && et || avec gestion des priorit√©s via des parenth√®ses.
	‚Ä¢	G√©rer les wildcards (*) pour le r√©pertoire courant.

‚ö†Ô∏è Important : La partie bonus ne sera √©valu√©e que si la partie obligatoire est parfaite.
‚ÄúParfaite‚Äù signifie que toutes les fonctionnalit√©s demand√©es fonctionnent sans erreurs.
